#include <WiFi.h>
#include <SimpleDHT.h>
#include <cmath> // Required for log() and pow()

// WiFi credentials (UPDATE THESE)
const char* ssid = "AndroidAP";
const char* password = "bjzo3352";

// DHT11 sensor on GPIO4
#define DHTPIN 4
SimpleDHT11 dht11(DHTPIN);

// Web server
WiFiServer server(80);

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start the server
  server.begin();
}

/**
 * Simplified Heat Index Calculation (Approximation for presentation).
 */
float calculateHeatIndex(float T_c, float H_p) {
    if (T_c >= 26.7) { 
        // A common simplified formula for Celsius
        return T_c + 0.33 * H_p - 4.0; 
    } else {
        return T_c;
    }
}

/**
 * Dew Point Calculation (using Magnus-Tetens approximation).
 */
float calculateDewPoint(float T_c, float H_p) {
    // Magnus-Tetens formula constants
    const float A = 17.27;
    const float B = 237.7;

    // Calculate intermediate variable alpha
    float alpha = (A * T_c) / (B + T_c) + log(H_p / 100.0);

    // Dew Point calculation
    return (B * alpha) / (A - alpha);
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New Client Connected");
    String currentLine = "";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        
        if (c == '\n' && currentLine.length() == 0) {
          
          byte temperature = 0;
          byte humidity = 0;
          int err = dht11.read(&temperature, &humidity, NULL);
          
          // --- CALCULATE DERIVED METRICS ---
          
          float T_c = (float)temperature;
          float H_p = (float)humidity;
          
          float heatIndex_c = calculateHeatIndex(T_c, H_p);
          String heatIndex_display = String(heatIndex_c, 1);
          
          float dewPoint_c = calculateDewPoint(T_c, H_p);
          String dewPoint_display = String(dewPoint_c, 1);
          
          // --- BEGIN HTML GENERATION ---
          
          // HTTP Header
          String html = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n";
          
          // HTML Structure & Google Charts CDN
          html += "<!DOCTYPE html><html><head>";
          html += "<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1'>";
          html += "<title>Simple Weather Monitor</title>";
          html += "<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script>"; // Google Charts
          
          // CSS Styles (Updated styling)
          html += "<style>";
          html += "body { margin: 0; font-family: Arial, sans-serif; background-color: #f0f4f8; color: #333; text-align: center; }";
          html += ".container { max-width: 800px; margin: 30px auto; padding: 20px; background: white; border-radius: 15px; box-shadow: 0 6px 20px rgba(0,0,0,0.1); }";
          html += "h1 { color: #007bff; padding-bottom: 10px; border-bottom: 2px solid #eee; }";
          html += "h2 { color: #28a745; margin-top: 20px; }";
          html += ".metric-grid { display: flex; flex-wrap: wrap; justify-content: space-around; gap: 15px; margin-bottom: 20px; }";
          html += ".metric-item { flex-basis: 45%; background: #e9ecef; padding: 15px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }";
          html += ".metric-value { font-size: 2rem; font-weight: bold; color: #007bff; }";
          html += ".metric-label { font-size: 0.9rem; color: #6c757d; }";
          html += ".chart-container { display: flex; justify-content: space-around; flex-wrap: wrap; margin-top: 20px; }";
          html += ".gauge-chart, .bar-chart { width: 45%; min-width: 300px; height: 300px; margin: 10px; }";
          html += ".error { color: red; font-weight: bold; }";
          html += ".analysis-text { margin-top: 20px; padding: 15px; background: #fff3cd; border-left: 5px solid #ffc107; color: #856404; text-align: left; border-radius: 8px; }";
          html += ".quote-box { margin-top: 15px; padding: 10px; font-style: italic; background: #e0f7fa; border-left: 5px solid #00bcd4; color: #00838f; font-size: 0.9em; }"; // New Quote Style
          html += "</style></head><body>";
          
          // HTML Content
          html += "<div class='container'>";
          html += "<h1>Simple ESP32 Weather Analysis ðŸ”¬</h1>";
          
          if (err != SimpleDHTErrSuccess) {
            html += "<p class='error'>Error reading sensor.</p>";
          } 
          
          // --- METRIC GRID ---
          html += "<h2>Current Conditions</h2>";
          html += "<div class='metric-grid'>";
          
          // 1. Temperature
          html += "<div class='metric-item'>";
          html += "<div class='metric-value'>" + String(temperature) + "Â°C</div>";
          html += "<div class='metric-label'>Air Temperature</div>";
          html += "</div>";

          // 2. Humidity
          html += "<div class='metric-item'>";
          html += "<div class='metric-value'>" + String(humidity) + " %</div>";
          html += "<div class='metric-label'>Relative Humidity</div>";
          html += "</div>";
          
          // 3. Heat Index (Feels Like)
          html += "<div class='metric-item' style='background-color:#ffe5e5;'>";
          html += "<div class='metric-value'>" + heatIndex_display + "Â°C</div>";
          html += "<div class='metric-label'>ðŸ”¥ Heat Index (Feels Like)</div>";
          html += "</div>";
          
          // 4. Dew Point
          html += "<div class='metric-item' style='background-color:#e0f7fa;'>";
          html += "<div class='metric-value'>" + dewPoint_display + "Â°C</div>";
          html += "<div class='metric-label'>ðŸ’§ Dew Point</div>";
          html += "</div>";
          
          html += "</div>"; // End metric-grid

          // --- ANALYSIS SECTION ---
          html += "<div class='analysis-text'>";
          html += "<strong>Analysis & Interpretation:</strong>";
          html += "<ul>";
          html += "<li>The <strong>Heat Index (" + heatIndex_display + "Â°C)</strong> combines temperature and humidity to show thermal comfort/stress.</li>";
          html += "<li>The <strong>Dew Point (" + dewPoint_display + "Â°C)</strong> indicates the absolute amount of moisture. When Dew Point approaches Air Temp, condensation or fog is imminent.</li>";
          html += "</ul>";
          
          // --- CROP HEALTH QUOTE ---
          html += "<div class='quote-box'>";
          html += "ðŸŒ± \"Precise humidity control is non-negotiable for crop health, directly influencing a plant's transpiration rate and susceptibility to fungal diseases.\"";
          html += "</div>";
          
          html += "</div>";

          // --- CHARTS ---
          html += "<div class='chart-container'>";
          html += "<div id='temperature_gauge' class='gauge-chart'></div>";
          html += "<div id='humidity_bar' class='bar-chart'></div>";
          html += "</div>"; // End chart-container
          
          // --- JavaScript for Google Charts ---
          html += "<script type='text/javascript'>";
          html += "google.charts.load('current', {'packages':['gauge', 'corechart']});";
          html += "google.charts.setOnLoadCallback(drawCharts);";
          
          html += "function drawCharts() {";
          
          // 1. Temperature Gauge Chart
          html += "var dataTemp = google.visualization.arrayToDataTable([";
          html += "['Label', 'Value'],";
          html += "['Temp (Â°C)', " + String(temperature) + "]";
          html += "]);";
          
          html += "var optionsTemp = {";
          html += "width: 300, height: 300,";
          html += "redFrom: 30, redTo: 50,";
          html += "yellowFrom: 25, yellowTo: 30,";
          html += "minorTicks: 5, min: 0, max: 50";
          html += "};";
          
          html += "var chartTemp = new google.visualization.Gauge(document.getElementById('temperature_gauge'));";
          html += "chartTemp.draw(dataTemp, optionsTemp);";
          
          // 2. Humidity Bar Chart
          html += "var dataHum = google.visualization.arrayToDataTable([";
          html += "['Condition', 'Humidity (%)', { role: 'style' }],";
          html += "['Current', " + String(humidity) + ", 'color: #3498db']"; 
          html += "]);";
          
          html += "var optionsHum = {";
          html += "title: 'Relative Humidity',";
          html += "legend: { position: 'none' },";
          html += "vAxis: { minValue: 0, maxValue: 100, title: 'Humidity (%)' }";
          html += "};";
          
          html += "var chartHum = new google.visualization.BarChart(document.getElementById('humidity_bar'));";
          html += "chartHum.draw(dataHum, optionsHum);";
          
          html += "}"; // End drawCharts function
          html += "</script>";
          
          html += "</div></body></html>";
          
          // Send the response
          client.print(html);
          break; // Close connection
        } else if (c != '\r') {
          currentLine += c;
        } else {
          currentLine = "";
        }
      }
    }
    
    // Cleanup
    delay(1);
    client.stop();
    Serial.println("Client Disconnected");
  }
}